// Mosu.jsx
// Renders & passes props into ApplicationList.js
// Handles new Applications and ModifyApplications

import React from 'react';
import ApplicationList from './ApplicationList';

export default class Mosu extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            loading: false,
            error: null,
            ajaxError: null,
            data: []
        };

        this.loadJobAppDataFromServer = this.loadJobAppDataFromServer.bind(this);
        this.handleNewApplicationSubmit = this.handleNewApplicationSubmit.bind(this);
        this.handleModifyApplicationSubmit = this.handleModifyApplicationSubmit.bind(this);
        this.handleDelete = this.handleDelete.bind(this);
        this.componentDidMount = this.componentDidMount.bind(this);
        this.componentDidUpdate = this.componentDidUpdate.bind(this);
    }

    loadJobAppDataFromServer() {
        this.setState({loading: true});
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            beforeSend: function(xhr) {
                let authHeaderText = "Bearer " + localStorage.getItem('api_token');

                xhr.setRequestHeader('Authorization', authHeaderText);
            }.bind(this),
            success: function(data) {
                if (typeof data.error !== 'undefined') {
                    this.setState({error: data.error});
                } else {
                    this.setState({data: data, ajaxError: null});
                }
            }.bind(this),
            error: function(xhr, status, err) {
                this.setState({ajaxError: 'MosuAjaxError'});
                // console.error(this.props.url, status, err.toString());
            }.bind(this),
            complete: function() {
                this.setState({loading: false});
                setTimeout(this.loadJobAppDataFromServer, this.props.pollInterval);
            }.bind(this)
        });
    }

    handleNewApplicationSubmit(jobApplication) {
        // If current state is empty
        if (this.state.data) {
            let job_applications = [];
        } else {
            let job_applications = this.state.data;
        }
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        jobApplication.id = Date.now();
        let new_job_applications = job_applications.concat([jobApplication]);
        this.setState({data: new_job_applications});
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: jobApplication,
            beforeSend: function(xhr) {
                let authHeaderText = "Bearer " + localStorage.getItem('api_token');
                xhr.setRequestHeader('Authorization', authHeaderText);
            }.bind(this),
            success: function(data) {
                // "data" here is the API response success code, not the app data
                // Uncommenting the line below will cause strange edge case behavior
                // this.setState({ data: data});
                console.log(data);
            }.bind(this),
            error: function(xhr, status, err) {
                // console.error(this.props.url, status, err.toString());
            }.bind(this),
            complete: function() {
                this.loadJobAppDataFromServer();
            }.bind(this)
        });
    }

    handleModifyApplicationSubmit(jobApplication, id) {
        $.ajax({
            url: this.props.url + '/update/' + id,
            dataType: 'json',
            type: 'POST',
            data: jobApplication,
            success: function(data) {
                // this.setState({ data: data });
                console.log(data);
            }.bind(this),
            error: function(xhr, status, err) {
                console.log(data);
                // console.error(this.props.url, status, err.toString());
            }.bind(this)});
    }

    handleDelete(id) {
        $.ajax({
            url: this.props.url + '/delete/' + id,
            type: 'POST',
            success: function(data) {
                // If we just deleted the last item, remove it.
                if (this.state.data.length == 1) {
                    this.setState({data: []}// Otherwise, just update with new list.
                    );
                } else {
                    console.log(this.state.data);
                    console.log(data);
                    this.loadJobAppDataFromServer();
                }
            }.bind(this),
            error: function(xhr, status, err) {
                // console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
        if (this.state.data.length == 1) {
            let job_applications = [];
        } else {
            let job_applications = this.state.data;
        }
    }

    // When component is loaded successfully
    componentDidMount() {
        this.loadJobAppDataFromServer();
    }

    componentDidUpdate() {
        // let updated_job_list = this.state.data;
        // this.setState({ data: updated_job_list })
    }

    render() {
        return (
            <div className="container__mosu container">

                <ApplicationList data={this.state.data} callbackAppSubmit={this.handleModifyApplicationSubmit} onNewAppSubmit={this.handleNewApplicationSubmit} handleDelete={this.handleDelete}/>
            </div>
        )
    }
}
